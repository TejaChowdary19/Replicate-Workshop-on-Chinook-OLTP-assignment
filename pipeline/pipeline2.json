{
	"name": "pipeline2",
	"properties": {
		"activities": [
			{
				"name": "Populate_DATE_DIM",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_account": "VXBXIAN-SWA36353",
						"p_database": "MEDIA_DB",
						"p_warehouse": "MEDIA_WH",
						"p_role": "ACCOUNTADMIN",
						"p_username": "TEJACHOWDARY"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "USE ROLE MEDIA_ROLE;\nUSE WAREHOUSE MEDIA_WH;\nUSE DATABASE MEDIA_DB;\nUSE SCHEMA DW;\n\n-- Clear if you want a full refresh\nTRUNCATE TABLE DATE_DIM;\n\nCREATE OR REPLACE TEMP TABLE rng AS\nSELECT \n  DATE_TRUNC('day', MIN(InvoiceDate)) AS start_d,\n  DATE_TRUNC('day', MAX(InvoiceDate)) AS end_d\nFROM MEDIA_DB.STAGE.Invoice;\n\nINSERT INTO DATE_DIM (\n  FULL_DATE, DAY_NUM, WEEKDAY_ABBR, WEEKDAY_NUM, DAY_OF_YEAR_NUM, WEEK_OF_YEAR,\n  MONTH_NUM, MONTH_ABBR, QUARTER_NUM, QUARTER_NAME, YEAR_NUM,\n  FIRST_DAY_OF_MONTH, LAST_DAY_OF_MONTH, IS_WEEKEND\n)\nSELECT\n  DATEADD('day', seq4(), start_d)::DATE AS FULL_DATE,\n  DAY(DATEADD('day', seq4(), start_d)) AS DAY_NUM,\n  TO_VARCHAR(DATEADD('day', seq4(), start_d), 'DY') AS WEEKDAY_ABBR,\n  DAYOFWEEK(DATEADD('day', seq4(), start_d)) AS WEEKDAY_NUM,\n  DAYOFYEAR(DATEADD('day', seq4(), start_d)) AS DAY_OF_YEAR_NUM,\n  WEEKISO(DATEADD('day', seq4(), start_d)) AS WEEK_OF_YEAR,\n  MONTH(DATEADD('day', seq4(), start_d)) AS MONTH_NUM,\n  TO_VARCHAR(DATEADD('day', seq4(), start_d), 'MON') AS MONTH_ABBR,\n  QUARTER(DATEADD('day', seq4(), start_d)) AS QUARTER_NUM,\n  CONCAT('Q', QUARTER(DATEADD('day', seq4(), start_d))) AS QUARTER_NAME,\n  YEAR(DATEADD('day', seq4(), start_d)) AS YEAR_NUM,\n  DATE_TRUNC('month', DATEADD('day', seq4(), start_d)) AS FIRST_DAY_OF_MONTH,\n  LAST_DAY(DATEADD('day', seq4(), start_d)) AS LAST_DAY_OF_MONTH,\n  IFF(DAYOFWEEK(DATEADD('day', seq4(), start_d)) IN (0,6), 'Y', 'N') AS IS_WEEKEND\nFROM rng, TABLE(GENERATOR(ROWCOUNT => 10000))\nWHERE seq4() <= DATEDIFF('day', start_d, end_d);\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Populate_TIME_DIM",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Populate_DATE_DIM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_account": "VXBXIAN-SWA36353",
						"p_database": "MEDIA_DB",
						"p_warehouse": "MEDIA_WH",
						"p_role": "ACCOUNTADMIN",
						"p_username": "TEJACHOWDARY"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "USE ROLE MEDIA_ROLE;\nUSE WAREHOUSE MEDIA_WH;\nUSE DATABASE MEDIA_DB;\nUSE SCHEMA DW;\n\nTRUNCATE TABLE TIME_DIM;\n\nINSERT INTO TIME_DIM (HOUR_NUM, MINUTE_NUM, TIME_24_HR)\nSELECT \n  HOUR_NUM, \n  MINUTE_NUM, \n  LPAD(HOUR_NUM::STRING,2,'0') || ':' || LPAD(MINUTE_NUM::STRING,2,'0')\nFROM (\n  SELECT \n    (SEQ4() / 60)::INT AS HOUR_NUM,\n    (SEQ4() % 60)::INT AS MINUTE_NUM\n  FROM TABLE(GENERATOR(ROWCOUNT => 1440))\n);\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Upsert_CUSTOMER_DIM",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Populate_TIME_DIM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_account": "VXBXIAN-SWA36353",
						"p_database": "MEDIA_DB",
						"p_warehouse": "MEDIA_WH",
						"p_role": "ACCOUNTADMIN",
						"p_username": "TEJACHOWDARY"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "USE ROLE MEDIA_ROLE;\nUSE WAREHOUSE MEDIA_WH;\nUSE DATABASE MEDIA_DB;\nUSE SCHEMA DW;\n\nMERGE INTO CUSTOMER_DIM t\nUSING (\n  SELECT\n    CUSTOMERID,\n    FIRSTNAME,\n    LASTNAME,\n    COMPANY,\n    CITY,\n    STATE,\n    COUNTRY,\n    POSTALCODE,\n    SUPPORTREPID,\n    SHA2( TO_VARCHAR(CUSTOMERID) || '|' ||\n          UPPER(TRIM(FIRSTNAME)) || '|' || UPPER(TRIM(LASTNAME)) || '|' ||\n          NVL(UPPER(TRIM(COMPANY)),'') || '|' ||\n          UPPER(TRIM(CITY)) || '|' || UPPER(TRIM(STATE)) || '|' ||\n          UPPER(TRIM(COUNTRY)) || '|' || NVL(UPPER(TRIM(POSTALCODE)),'') || '|' ||\n          TO_VARCHAR(SUPPORTREPID), 256) AS HASH_VALUE\n  FROM MEDIA_DB.STAGE.CUSTOMER\n) s\nON t.CUSTOMER_ID = s.CUSTOMERID\nWHEN MATCHED AND t.HASH_VALUE <> s.HASH_VALUE THEN\n  UPDATE SET\n    FIRST_NAME   = s.FIRSTNAME,\n    LAST_NAME    = s.LASTNAME,\n    COMPANY      = s.COMPANY,\n    CITY         = s.CITY,\n    STATE        = s.STATE,\n    COUNTRY      = s.COUNTRY,\n    ZIP_CODE     = s.POSTALCODE,\n    EMPLOYEE_ID  = s.SUPPORTREPID,\n    HASH_VALUE   = s.HASH_VALUE,\n    DATE_TO_WAREHOUSE = CURRENT_TIMESTAMP()\nWHEN NOT MATCHED THEN\n  INSERT (CUSTOMER_ID, FIRST_NAME, LAST_NAME, COMPANY, CITY, STATE, COUNTRY, ZIP_CODE, EMPLOYEE_ID, HASH_VALUE, SOURCE_ID)\n  VALUES (s.CUSTOMERID, s.FIRSTNAME, s.LASTNAME, s.COMPANY, s.CITY, s.STATE, s.COUNTRY, s.POSTALCODE, s.SUPPORTREPID, s.HASH_VALUE, 'CHINOOK');",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Upsert_ARTIST_DIM",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Upsert_CUSTOMER_DIM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_account": "VXBXIAN-SWA36353",
						"p_database": "MEDIA_DB",
						"p_warehouse": "MEDIA_WH",
						"p_role": "ACCOUNTADMIN",
						"p_username": "TEJACHOWDARY"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "USE ROLE MEDIA_ROLE;\nUSE WAREHOUSE MEDIA_WH;\nUSE DATABASE MEDIA_DB;\nUSE SCHEMA DW;\n\nMERGE INTO ARTIST_DIM t\nUSING (\n  SELECT ARTISTID, NAME\n  FROM MEDIA_DB.STAGE.ARTIST\n) s\nON t.ARTIST_ID = s.ARTISTID\nWHEN MATCHED THEN\n  UPDATE SET ARTIST_NAME = s.NAME, DATE_TO_WAREHOUSE = CURRENT_TIMESTAMP()\nWHEN NOT MATCHED THEN\n  INSERT (ARTIST_ID, ARTIST_NAME, SOURCE_ID)\n  VALUES (s.ARTISTID, s.NAME, 'CHINOOK');",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Load_SALES_FACT",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Upsert_ARTIST_DIM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_account": "VXBXIAN-SWA36353",
						"p_database": "MEDIA_DB",
						"p_warehouse": "MEDIA_WH",
						"p_role": "ACCOUNTADMIN",
						"p_username": "TEJACHOWDARY"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "USE ROLE MEDIA_ROLE;\nUSE WAREHOUSE MEDIA_WH;\nUSE DATABASE MEDIA_DB;\nUSE SCHEMA DW;\n\nINSERT INTO SALES_FACT (CUSTOMER_KEY, INVOICE_ID, DATE_DIM_KEY, TOTAL_SALE_AMT, SOURCE_ID)\nSELECT\n  c.CUSTOMER_KEY,\n  i.InvoiceId,\n  d.DATE_KEY,\n  i.Total,\n  1 AS SOURCE_ID\nFROM MEDIA_DB.STAGE.Invoice i\nJOIN DW.CUSTOMER_DIM c ON c.CUSTOMER_ID = i.CustomerId\nJOIN DW.DATE_DIM d     ON d.FULL_DATE   = CAST(i.InvoiceDate AS DATE)\nLEFT JOIN DW.SALES_FACT f ON f.INVOICE_ID = i.InvoiceId\nWHERE f.INVOICE_ID IS NULL;",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Validate_Counts",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Load_SALES_FACT",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_account": "VXBXIAN-SWA36353",
						"p_database": "MEDIA_DB",
						"p_warehouse": "MEDIA_WH",
						"p_role": "ACCOUNTADMIN",
						"p_username": "TEJACHOWDARY"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "USE ROLE MEDIA_ROLE;\nUSE WAREHOUSE MEDIA_WH;\nUSE DATABASE MEDIA_DB;\nUSE SCHEMA DW;\n\nSELECT 'DATE_DIM', COUNT(*) FROM DATE_DIM\nUNION ALL SELECT 'TIME_DIM', COUNT(*) FROM TIME_DIM\nUNION ALL SELECT 'CUSTOMER_DIM', COUNT(*) FROM CUSTOMER_DIM\nUNION ALL SELECT 'ARTIST_DIM', COUNT(*) FROM ARTIST_DIM\nUNION ALL SELECT 'SALES_FACT', COUNT(*) FROM SALES_FACT;",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2025-10-14T07:59:14Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}